
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000609  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000534  00000000  00000000  000007b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020c  00000000  00000000  00000ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ec  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012e  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001362  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	3e c0       	rjmp	.+124    	; 0xb2 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
void clrBit(uint8_t *port, const uint8_t pin){
	*port &= ~(1 << pin);
}

int main(void)
{
  38:	cf 93       	push	r28
  3a:	df 93       	push	r29
  3c:	cd b7       	in	r28, 0x3d	; 61
  3e:	de b7       	in	r29, 0x3e	; 62
  40:	28 97       	sbiw	r28, 0x08	; 8
  42:	0f b6       	in	r0, 0x3f	; 63
  44:	f8 94       	cli
  46:	de bf       	out	0x3e, r29	; 62
  48:	0f be       	out	0x3f, r0	; 63
  4a:	cd bf       	out	0x3d, r28	; 61
	uint8_t disp_type = COM_CATHODE_TYPE;
	volatile uint8_t active_digit_mask[END_DIGIT_PIN - START_DIGIT_PIN + 1];
	volatile uint8_t mask = ~(0), inv_mask = 0; 
  4c:	8f ef       	ldi	r24, 0xFF	; 255
  4e:	8f 83       	std	Y+7, r24	; 0x07
  50:	18 86       	std	Y+8, r1	; 0x08
	mask = ((mask << START_DIGIT_PIN) & (mask >> (PORT_SIZE - END_DIGIT_PIN - 1)));
  52:	9f 81       	ldd	r25, Y+7	; 0x07
  54:	8f 81       	ldd	r24, Y+7	; 0x07
  56:	96 95       	lsr	r25
  58:	96 95       	lsr	r25
  5a:	89 23       	and	r24, r25
  5c:	8f 83       	std	Y+7, r24	; 0x07
	inv_mask = ~mask;
  5e:	8f 81       	ldd	r24, Y+7	; 0x07
  60:	80 95       	com	r24
  62:	88 87       	std	Y+8, r24	; 0x08
	uint8_t i = 0, k = 0;
	DDRD |= mask; 
  64:	9f 81       	ldd	r25, Y+7	; 0x07
  66:	81 b3       	in	r24, 0x11	; 17
  68:	89 2b       	or	r24, r25
  6a:	81 bb       	out	0x11, r24	; 17
	for (i = START_DIGIT_PIN, k = 0; i <= END_DIGIT_PIN; i++, k++) {
		if (disp_type == COM_ANODE_TYPE) {
			active_digit_mask[k] = ~(1 << i);
		} else {
			active_digit_mask[k] = (1 << i);
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	89 83       	std	Y+1, r24	; 0x01
  70:	82 e0       	ldi	r24, 0x02	; 2
  72:	8a 83       	std	Y+2, r24	; 0x02
  74:	84 e0       	ldi	r24, 0x04	; 4
  76:	8b 83       	std	Y+3, r24	; 0x03
  78:	88 e0       	ldi	r24, 0x08	; 8
  7a:	8c 83       	std	Y+4, r24	; 0x04
  7c:	80 e1       	ldi	r24, 0x10	; 16
  7e:	8d 83       	std	Y+5, r24	; 0x05
  80:	80 e2       	ldi	r24, 0x20	; 32
  82:	8e 83       	std	Y+6, r24	; 0x06
		}
	}
	PORTD = mask;
  84:	8f 81       	ldd	r24, Y+7	; 0x07
  86:	82 bb       	out	0x12, r24	; 18
void clrBit(uint8_t *port, const uint8_t pin){
	*port &= ~(1 << pin);
}

int main(void)
{
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	90 e0       	ldi	r25, 0x00	; 0
		for (i = 0; i <= END_DIGIT_PIN - START_DIGIT_PIN; i++) {
			if (disp_type == COM_ANODE_TYPE) {
				PORTD |= mask;
				PORTD &= active_digit_mask[i];
			} else {
				PORTD &= inv_mask;
  8c:	38 85       	ldd	r19, Y+8	; 0x08
  8e:	22 b3       	in	r18, 0x12	; 18
  90:	23 23       	and	r18, r19
  92:	22 bb       	out	0x12, r18	; 18
				PORTD |= active_digit_mask[i];
  94:	e1 e0       	ldi	r30, 0x01	; 1
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	ec 0f       	add	r30, r28
  9a:	fd 1f       	adc	r31, r29
  9c:	e8 0f       	add	r30, r24
  9e:	f9 1f       	adc	r31, r25
  a0:	30 81       	ld	r19, Z
  a2:	22 b3       	in	r18, 0x12	; 18
  a4:	23 2b       	or	r18, r19
  a6:	22 bb       	out	0x12, r18	; 18
  a8:	01 96       	adiw	r24, 0x01	; 1
	}
	PORTD = mask;
    /* Replace with your application code */
    while (1) 
    {
		for (i = 0; i <= END_DIGIT_PIN - START_DIGIT_PIN; i++) {
  aa:	86 30       	cpi	r24, 0x06	; 6
  ac:	91 05       	cpc	r25, r1
  ae:	71 f7       	brne	.-36     	; 0x8c <__SREG__+0x4d>
  b0:	eb cf       	rjmp	.-42     	; 0x88 <__SREG__+0x49>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
